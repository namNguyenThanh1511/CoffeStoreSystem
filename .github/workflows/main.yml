name: Deploy ASP.NET Core to Windows EC2 via WinRM (AllowUnencrypted)

on:
  push:
    branches: ["main"]

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --no-build --verbosity normal

      - name: Publish app
        run: dotnet publish -c Release -o ./publish

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./publish

  deploy:
    name: Deploy to EC2 Windows Server via WinRM
    runs-on: windows-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: ./publish

      - name: Setup WinRM client (allow unencrypted)
        run: |
          Set-Item -Path WSMan:\localhost\Client\AllowUnencrypted -Value $true
          Set-Item -Path WSMan:\localhost\Client\Auth\Basic -Value $true
          Get-Item WSMan:\localhost\Client\AllowUnencrypted
          Get-Item WSMan:\localhost\Client\Auth\Basic
        shell: pwsh

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_WINDOWS_HOST }}
          EC2_USER: ${{ secrets.EC2_WINDOWS_USER }}
          EC2_PASS: ${{ secrets.EC2_WINDOWS_PASS }}
        run: |
          Write-Host "=== Setting up WinRM connection to $env:EC2_HOST ==="

          $secpasswd = ConvertTo-SecureString $env:EC2_PASS -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($env:EC2_USER, $secpasswd)

          Test-WSMan $env:EC2_HOST

          $session = New-PSSession -ComputerName $env:EC2_HOST -Credential $cred -Authentication Basic

          Write-Host "=== Copying published files to EC2 ==="
          Copy-Item -Path "./publish/*" -Destination "C:\deploy\publish" -Recurse -ToSession $session -Force

          Write-Host "=== Running deploy commands remotely ==="
          Invoke-Command -Session $session -ScriptBlock {
            cd C:\deploy
            Write-Host "Stopping old containers..."
            docker-compose down

            Write-Host "Starting new containers..."
            docker-compose up -d --build

            Write-Host "=== Running containers ==="
            docker ps
          }

          Remove-PSSession $session
        shell: pwsh

      - name: Deployment finished
        run: echo "âœ… Deployment completed successfully!"
